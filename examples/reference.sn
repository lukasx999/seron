# Inline comment

# Tables
table Person {
    name: *char,
    age: int,
}

proc h(x: int) int;                                     # Procedure Declaration
proc f() void { }                                       # Empty Procedure
proc g(a: int, b: char) long { }                        # Parameters and Returntype

proc main() int {                                       # Entry point

    if 1 { } else { }                                   # If Statement
    while 0 { }                                         # While Loop

    let a: int;                                         # Variable declaration
    let b: int = 1;                                     # Variable definition
    b = 2;                                              # Assignment
    { }                                                 # Block

    let c: char = 1B;                                   # Byte literal
    let d: int  = 4I;                                   # Int literal
    let e: long = 8L;                                   # Long literal
    c = 'A';                                            # Char literal
    d = 4;                                              # Default type for literal is int
    let e: *char = "foo";                               # String
    let xs: *int = [ 1, 2, 3 ] int;                     # Array

    let gp: proc(a: int, b: char) long = g;             # Function Pointer

    a +  b;                                             # Addition
    a -  b;                                             # Subtraction
    a *  b;                                             # Multiplication
    a /  b;                                             # Division
    a == b;                                             # Equality
    a != b;                                             # Inequality
    a >  b;                                             # Greater-Than
    a >= b;                                             # Greater-Than-Or-Equal
    a <  b;                                             # Less-Than
    a <= b;                                             # Less-Than-Or-Equal
    a &  b;                                             # Bitwise AND
    a |  b;                                             # Bitwise OR
    a && b;                                             # Logical AND
    a || b;                                             # Logical OR
    !c;                                                 # Negation

    return 0;                                           # Return statement
}
